configfile : "config.yaml"
workdir: config["workdir"]


rule qcreport:
	input: 
		"{filename}.fastq.gz"
	output:
		"html/{filename}_fastqc.html"
	log:
		"html/{filename}.report.log"
	shell:
		"mkdir -p html;"
		"fastqc {input} -o html 2>&1 > {log}"

rule unzip:
	input:
		"{filename}.gz"
	output:
		"{filename}"
	shell:
		"gzip -d {input}"

rule alignment:
	input:
		fwd = "{sample}_R1.fastq",
		rev = "{sample}_R2.fastq"
	output:
		"{sample}.sam"
	threads:128 
	log:
		"{sample}.bwa.log"
	shell:
		"bwa mem -t {threads} {config[ref]} {input.fwd} {input.rev} > {output}  2> {log}"

rule sorting_sam:
	input:
		"{sample}.sam"
	output:
		"{sample}.sorted.sam"
	log:
		"{sample}.sorted.log"
	shell:
		"picard-tools SortSam INPUT={input} OUTPUT={output} SORT_ORDER=coordinate 2> {log}"


rule mark_duplicate:
	input:
		"{sample}.sorted.sam"
	output:
		"{sample}.markDuplicate.sam",
		"{sample}.markDuplicate.metrics"
	log:
		"{sample}.markDuplicate.log"
	shell:
		"picard-tools MarkDuplicatesWithMateCigar INPUT={input} OUTPUT={output[0]} M={output[1]} 2> {log}"


#Rule sam to bam 
rule sam_to_bam:
	input:
		"{filename}.sam"
	output:
		bam = "{filename}.bam"
	shell:
		"samtools view  -Sbh {input} > {output.bam}"

rule index_bam:
	input:
		"{filename}.bam"
	output:
		"{filename}.bam.bai"
	shell:
		"samtools index {input} {output}"


rule variant_calling:
	input:
		bam = "{sample}.markDuplicate.bam",
		bai = "{sample}.markDuplicate.bam.bai"
	output:
		"{sample}.vcf.gz"
	log:
		"{sample}.vcf.log"
	shell:
		"samtools mpileup -ugf {config[ref]} {input.bam} | bcftools call -vmO z -o {output}  2> {log}"


rule annotation_snpeff:
	input:
		vcf = "{sample}.vcf.gz"
	output:
		"{sample}.snpeff.vcf.gz"
	log:
		"{sample}.snpeff.log"
	shell:
		"snpEff {config[snpEff_ref]} {input} > {output}  2> {log}"